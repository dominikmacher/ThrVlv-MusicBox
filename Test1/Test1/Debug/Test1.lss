
Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000602  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000676  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac0  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078f  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000497  00000000  00000000  000019c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b6  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000453  00000000  00000000  0000247a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000028cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8d c1       	rjmp	.+794    	; 0x31c <__ctors_end>
   2:	00 00       	nop
   4:	9b c1       	rjmp	.+822    	; 0x33c <__bad_interrupt>
   6:	00 00       	nop
   8:	99 c1       	rjmp	.+818    	; 0x33c <__bad_interrupt>
   a:	00 00       	nop
   c:	97 c1       	rjmp	.+814    	; 0x33c <__bad_interrupt>
   e:	00 00       	nop
  10:	95 c1       	rjmp	.+810    	; 0x33c <__bad_interrupt>
  12:	00 00       	nop
  14:	93 c1       	rjmp	.+806    	; 0x33c <__bad_interrupt>
  16:	00 00       	nop
  18:	91 c1       	rjmp	.+802    	; 0x33c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8f c1       	rjmp	.+798    	; 0x33c <__bad_interrupt>
  1e:	00 00       	nop
  20:	8d c1       	rjmp	.+794    	; 0x33c <__bad_interrupt>
  22:	00 00       	nop
  24:	8b c1       	rjmp	.+790    	; 0x33c <__bad_interrupt>
  26:	00 00       	nop
  28:	89 c1       	rjmp	.+786    	; 0x33c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	87 c1       	rjmp	.+782    	; 0x33c <__bad_interrupt>
  2e:	00 00       	nop
  30:	85 c1       	rjmp	.+778    	; 0x33c <__bad_interrupt>
  32:	00 00       	nop
  34:	83 c1       	rjmp	.+774    	; 0x33c <__bad_interrupt>
  36:	00 00       	nop
  38:	ef c1       	rjmp	.+990    	; 0x418 <__vector_14>
  3a:	00 00       	nop
  3c:	7f c1       	rjmp	.+766    	; 0x33c <__bad_interrupt>
  3e:	00 00       	nop
  40:	7d c1       	rjmp	.+762    	; 0x33c <__bad_interrupt>
  42:	00 00       	nop
  44:	7b c1       	rjmp	.+758    	; 0x33c <__bad_interrupt>
  46:	00 00       	nop
  48:	79 c1       	rjmp	.+754    	; 0x33c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	77 c1       	rjmp	.+750    	; 0x33c <__bad_interrupt>
  4e:	00 00       	nop
  50:	75 c1       	rjmp	.+746    	; 0x33c <__bad_interrupt>
  52:	00 00       	nop
  54:	73 c1       	rjmp	.+742    	; 0x33c <__bad_interrupt>
  56:	00 00       	nop
  58:	71 c1       	rjmp	.+738    	; 0x33c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6f c1       	rjmp	.+734    	; 0x33c <__bad_interrupt>
  5e:	00 00       	nop
  60:	6d c1       	rjmp	.+730    	; 0x33c <__bad_interrupt>
  62:	00 00       	nop
  64:	6b c1       	rjmp	.+726    	; 0x33c <__bad_interrupt>
	...

00000068 <__trampolines_end>:
  68:	26 01       	movw	r4, r12
  6a:	04 00       	.word	0x0004	; ????
  6c:	72 01       	movw	r14, r4
  6e:	04 00       	.word	0x0004	; ????
  70:	b8 01       	movw	r22, r16
  72:	04 00       	.word	0x0004	; ????
  74:	b8 01       	movw	r22, r16
  76:	08 00       	.word	0x0008	; ????
  78:	70 03       	mulsu	r23, r16
  7a:	04 00       	.word	0x0004	; ????
  7c:	70 03       	mulsu	r23, r16
  7e:	04 00       	.word	0x0004	; ????
  80:	00 00       	nop
  82:	04 00       	.word	0x0004	; ????
  84:	e4 02       	muls	r30, r20
  86:	04 00       	.word	0x0004	; ????
  88:	e4 02       	muls	r30, r20
  8a:	04 00       	.word	0x0004	; ????
  8c:	00 00       	nop
  8e:	04 00       	.word	0x0004	; ????
  90:	26 01       	movw	r4, r12
  92:	04 00       	.word	0x0004	; ????
  94:	26 01       	movw	r4, r12
  96:	04 00       	.word	0x0004	; ????
  98:	72 01       	movw	r14, r4
  9a:	04 00       	.word	0x0004	; ????
  9c:	b8 01       	movw	r22, r16
  9e:	04 00       	.word	0x0004	; ????
  a0:	b8 01       	movw	r22, r16
  a2:	08 00       	.word	0x0008	; ????
  a4:	70 03       	mulsu	r23, r16
  a6:	04 00       	.word	0x0004	; ????
  a8:	70 03       	mulsu	r23, r16
  aa:	04 00       	.word	0x0004	; ????
  ac:	00 00       	nop
  ae:	04 00       	.word	0x0004	; ????
  b0:	10 03       	mulsu	r17, r16
  b2:	04 00       	.word	0x0004	; ????
  b4:	10 03       	mulsu	r17, r16
  b6:	04 00       	.word	0x0004	; ????
  b8:	00 00       	nop
  ba:	04 00       	.word	0x0004	; ????
  bc:	15 01       	movw	r2, r10
  be:	04 00       	.word	0x0004	; ????
  c0:	15 01       	movw	r2, r10
  c2:	04 00       	.word	0x0004	; ????
  c4:	4a 01       	movw	r8, r20
  c6:	04 00       	.word	0x0004	; ????
  c8:	ee 01       	movw	r28, r28
  ca:	04 00       	.word	0x0004	; ????
  cc:	ee 01       	movw	r28, r28
  ce:	08 00       	.word	0x0008	; ????
  d0:	dc 03       	fmulsu	r21, r20
  d2:	04 00       	.word	0x0004	; ????
  d4:	dc 03       	fmulsu	r21, r20
  d6:	04 00       	.word	0x0004	; ????
  d8:	00 00       	nop
  da:	04 00       	.word	0x0004	; ????
  dc:	10 03       	mulsu	r17, r16
  de:	04 00       	.word	0x0004	; ????
  e0:	10 03       	mulsu	r17, r16
  e2:	04 00       	.word	0x0004	; ????
  e4:	00 00       	nop
  e6:	04 00       	.word	0x0004	; ????
  e8:	15 01       	movw	r2, r10
  ea:	04 00       	.word	0x0004	; ????
  ec:	15 01       	movw	r2, r10
  ee:	04 00       	.word	0x0004	; ????
  f0:	4a 01       	movw	r8, r20
  f2:	04 00       	.word	0x0004	; ????
  f4:	ee 01       	movw	r28, r28
  f6:	04 00       	.word	0x0004	; ????
  f8:	ee 01       	movw	r28, r28
  fa:	08 00       	.word	0x0008	; ????
  fc:	dc 03       	fmulsu	r21, r20
  fe:	04 00       	.word	0x0004	; ????
 100:	dc 03       	fmulsu	r21, r20
 102:	04 00       	.word	0x0004	; ????
 104:	00 00       	nop
 106:	04 00       	.word	0x0004	; ????
 108:	e4 02       	muls	r30, r20
 10a:	04 00       	.word	0x0004	; ????
 10c:	e4 02       	muls	r30, r20
 10e:	04 00       	.word	0x0004	; ????
 110:	00 00       	nop
 112:	04 00       	.word	0x0004	; ????
 114:	26 01       	movw	r4, r12
 116:	04 00       	.word	0x0004	; ????
 118:	26 01       	movw	r4, r12
 11a:	04 00       	.word	0x0004	; ????
 11c:	72 01       	movw	r14, r4
 11e:	04 00       	.word	0x0004	; ????
 120:	b8 01       	movw	r22, r16
 122:	04 00       	.word	0x0004	; ????
 124:	4b 02       	muls	r20, r27
 126:	08 00       	.word	0x0008	; ????
 128:	97 04       	cpc	r9, r7
 12a:	04 00       	.word	0x0004	; ????
 12c:	97 04       	cpc	r9, r7
 12e:	04 00       	.word	0x0004	; ????
 130:	00 00       	nop
 132:	04 00       	.word	0x0004	; ????
 134:	70 03       	mulsu	r23, r16
 136:	04 00       	.word	0x0004	; ????
 138:	70 03       	mulsu	r23, r16
 13a:	04 00       	.word	0x0004	; ????
 13c:	00 00       	nop
 13e:	04 00       	.word	0x0004	; ????
 140:	26 01       	movw	r4, r12
 142:	04 00       	.word	0x0004	; ????
 144:	26 01       	movw	r4, r12
 146:	04 00       	.word	0x0004	; ????
 148:	72 01       	movw	r14, r4
 14a:	04 00       	.word	0x0004	; ????
 14c:	b8 01       	movw	r22, r16
 14e:	04 00       	.word	0x0004	; ????
 150:	4b 02       	muls	r20, r27
 152:	08 00       	.word	0x0008	; ????
 154:	97 04       	cpc	r9, r7
 156:	04 00       	.word	0x0004	; ????
 158:	97 04       	cpc	r9, r7
 15a:	04 00       	.word	0x0004	; ????
 15c:	00 00       	nop
 15e:	04 00       	.word	0x0004	; ????
 160:	dc 03       	fmulsu	r21, r20
 162:	04 00       	.word	0x0004	; ????
 164:	dc 03       	fmulsu	r21, r20
 166:	04 00       	.word	0x0004	; ????
 168:	00 00       	nop
 16a:	04 00       	.word	0x0004	; ????
 16c:	4a 01       	movw	r8, r20
 16e:	04 00       	.word	0x0004	; ????
 170:	4a 01       	movw	r8, r20
 172:	04 00       	.word	0x0004	; ????
 174:	88 01       	movw	r16, r16
 176:	04 00       	.word	0x0004	; ????
 178:	ee 01       	movw	r28, r28
 17a:	04 00       	.word	0x0004	; ????
 17c:	ee 01       	movw	r28, r28
 17e:	10 00       	.word	0x0010	; ????
 180:	9f 01       	movw	r18, r30
 182:	04 00       	.word	0x0004	; ????
 184:	b8 01       	movw	r22, r16
 186:	04 00       	.word	0x0004	; ????
 188:	e4 02       	muls	r30, r20
 18a:	10 00       	.word	0x0010	; ????
 18c:	4b 02       	muls	r20, r27
 18e:	04 00       	.word	0x0004	; ????
 190:	72 01       	movw	r14, r4
 192:	04 00       	.word	0x0004	; ????
 194:	72 01       	movw	r14, r4
 196:	08 00       	.word	0x0008	; ????
 198:	4a 01       	movw	r8, r20
 19a:	04 00       	.word	0x0004	; ????
 19c:	ee 01       	movw	r28, r28
 19e:	08 00       	.word	0x0008	; ????
 1a0:	b8 01       	movw	r22, r16
 1a2:	04 00       	.word	0x0004	; ????
 1a4:	26 01       	movw	r4, r12
 1a6:	04 00       	.word	0x0004	; ????
 1a8:	00 00       	nop
 1aa:	08 00       	.word	0x0008	; ????
 1ac:	4b 02       	muls	r20, r27
 1ae:	04 00       	.word	0x0004	; ????
 1b0:	2a 02       	muls	r18, r26
 1b2:	04 00       	.word	0x0004	; ????
 1b4:	2a 02       	muls	r18, r26
 1b6:	04 00       	.word	0x0004	; ????
 1b8:	ee 01       	movw	r28, r28
 1ba:	04 00       	.word	0x0004	; ????
 1bc:	ee 01       	movw	r28, r28
 1be:	04 00       	.word	0x0004	; ????
 1c0:	00 00       	nop
 1c2:	04 00       	.word	0x0004	; ????
 1c4:	ee 01       	movw	r28, r28
 1c6:	04 00       	.word	0x0004	; ????
 1c8:	d2 01       	movw	r26, r4
 1ca:	04 00       	.word	0x0004	; ????
 1cc:	d2 01       	movw	r26, r4
 1ce:	04 00       	.word	0x0004	; ????
 1d0:	ee 01       	movw	r28, r28
 1d2:	04 00       	.word	0x0004	; ????
 1d4:	ee 01       	movw	r28, r28
 1d6:	04 00       	.word	0x0004	; ????
 1d8:	00 00       	nop
 1da:	04 00       	.word	0x0004	; ????
 1dc:	4a 01       	movw	r8, r20
 1de:	04 00       	.word	0x0004	; ????
 1e0:	4a 01       	movw	r8, r20
 1e2:	04 00       	.word	0x0004	; ????
 1e4:	72 01       	movw	r14, r4
 1e6:	08 00       	.word	0x0008	; ????
 1e8:	4a 01       	movw	r8, r20
 1ea:	04 00       	.word	0x0004	; ????
 1ec:	00 00       	nop
 1ee:	04 00       	.word	0x0004	; ????
 1f0:	4a 01       	movw	r8, r20
 1f2:	04 00       	.word	0x0004	; ????
 1f4:	4a 01       	movw	r8, r20
 1f6:	04 00       	.word	0x0004	; ????
 1f8:	ee 01       	movw	r28, r28
 1fa:	08 00       	.word	0x0008	; ????
 1fc:	b8 01       	movw	r22, r16
 1fe:	04 00       	.word	0x0004	; ????
 200:	00 00       	nop
 202:	04 00       	.word	0x0004	; ????
 204:	4b 02       	muls	r20, r27
 206:	04 00       	.word	0x0004	; ????
 208:	2a 02       	muls	r18, r26
 20a:	04 00       	.word	0x0004	; ????
 20c:	2a 02       	muls	r18, r26
 20e:	04 00       	.word	0x0004	; ????
 210:	ee 01       	movw	r28, r28
 212:	04 00       	.word	0x0004	; ????
 214:	ee 01       	movw	r28, r28
 216:	04 00       	.word	0x0004	; ????
 218:	00 00       	nop
 21a:	04 00       	.word	0x0004	; ????
 21c:	ee 01       	movw	r28, r28
 21e:	04 00       	.word	0x0004	; ????
 220:	2a 02       	muls	r18, r26
 222:	04 00       	.word	0x0004	; ????
 224:	93 02       	muls	r25, r19
 226:	04 00       	.word	0x0004	; ????
 228:	4b 02       	muls	r20, r27
 22a:	04 00       	.word	0x0004	; ????
 22c:	4b 02       	muls	r20, r27
 22e:	04 00       	.word	0x0004	; ????
 230:	00 00       	nop
 232:	04 00       	.word	0x0004	; ????
 234:	9f 01       	movw	r18, r30
 236:	04 00       	.word	0x0004	; ????
 238:	ee 01       	movw	r28, r28
 23a:	04 00       	.word	0x0004	; ????
 23c:	ee 01       	movw	r28, r28
 23e:	08 00       	.word	0x0008	; ????
 240:	b8 01       	movw	r22, r16
 242:	04 00       	.word	0x0004	; ????
 244:	9f 01       	movw	r18, r30
 246:	08 00       	.word	0x0008	; ????
 248:	72 01       	movw	r14, r4
 24a:	04 00       	.word	0x0004	; ????
 24c:	72 01       	movw	r14, r4
 24e:	04 00       	.word	0x0004	; ????
 250:	00 00       	nop
 252:	04 00       	.word	0x0004	; ????
 254:	4a 01       	movw	r8, r20
 256:	04 00       	.word	0x0004	; ????
 258:	b8 01       	movw	r22, r16
 25a:	04 00       	.word	0x0004	; ????
 25c:	4b 02       	muls	r20, r27
 25e:	04 00       	.word	0x0004	; ????
 260:	2a 02       	muls	r18, r26
 262:	04 00       	.word	0x0004	; ????
 264:	2a 02       	muls	r18, r26
 266:	04 00       	.word	0x0004	; ????
 268:	ee 01       	movw	r28, r28
 26a:	04 00       	.word	0x0004	; ????
 26c:	ee 01       	movw	r28, r28
 26e:	04 00       	.word	0x0004	; ????
 270:	00 00       	nop
 272:	04 00       	.word	0x0004	; ????
 274:	ee 01       	movw	r28, r28
 276:	04 00       	.word	0x0004	; ????
 278:	d2 01       	movw	r26, r4
 27a:	04 00       	.word	0x0004	; ????
 27c:	d2 01       	movw	r26, r4
 27e:	04 00       	.word	0x0004	; ????
 280:	ee 01       	movw	r28, r28
 282:	04 00       	.word	0x0004	; ????
 284:	ee 01       	movw	r28, r28
 286:	04 00       	.word	0x0004	; ????
 288:	00 00       	nop
 28a:	04 00       	.word	0x0004	; ????
 28c:	4a 01       	movw	r8, r20
 28e:	04 00       	.word	0x0004	; ????
 290:	4a 01       	movw	r8, r20
 292:	04 00       	.word	0x0004	; ????
 294:	72 01       	movw	r14, r4
 296:	08 00       	.word	0x0008	; ????
 298:	4a 01       	movw	r8, r20
 29a:	04 00       	.word	0x0004	; ????
 29c:	00 00       	nop
 29e:	04 00       	.word	0x0004	; ????
 2a0:	4a 01       	movw	r8, r20
 2a2:	04 00       	.word	0x0004	; ????
 2a4:	4a 01       	movw	r8, r20
 2a6:	04 00       	.word	0x0004	; ????
 2a8:	ee 01       	movw	r28, r28
 2aa:	08 00       	.word	0x0008	; ????
 2ac:	b8 01       	movw	r22, r16
 2ae:	04 00       	.word	0x0004	; ????
 2b0:	00 00       	nop
 2b2:	04 00       	.word	0x0004	; ????
 2b4:	4b 02       	muls	r20, r27
 2b6:	04 00       	.word	0x0004	; ????
 2b8:	2a 02       	muls	r18, r26
 2ba:	04 00       	.word	0x0004	; ????
 2bc:	2a 02       	muls	r18, r26
 2be:	04 00       	.word	0x0004	; ????
 2c0:	ee 01       	movw	r28, r28
 2c2:	04 00       	.word	0x0004	; ????
 2c4:	ee 01       	movw	r28, r28
 2c6:	04 00       	.word	0x0004	; ????
 2c8:	00 00       	nop
 2ca:	04 00       	.word	0x0004	; ????
 2cc:	ee 01       	movw	r28, r28
 2ce:	04 00       	.word	0x0004	; ????
 2d0:	2a 02       	muls	r18, r26
 2d2:	04 00       	.word	0x0004	; ????
 2d4:	93 02       	muls	r25, r19
 2d6:	04 00       	.word	0x0004	; ????
 2d8:	4b 02       	muls	r20, r27
 2da:	04 00       	.word	0x0004	; ????
 2dc:	4b 02       	muls	r20, r27
 2de:	04 00       	.word	0x0004	; ????
 2e0:	00 00       	nop
 2e2:	04 00       	.word	0x0004	; ????
 2e4:	9f 01       	movw	r18, r30
 2e6:	04 00       	.word	0x0004	; ????
 2e8:	ee 01       	movw	r28, r28
 2ea:	04 00       	.word	0x0004	; ????
 2ec:	ee 01       	movw	r28, r28
 2ee:	08 00       	.word	0x0008	; ????
 2f0:	b8 01       	movw	r22, r16
 2f2:	04 00       	.word	0x0004	; ????
 2f4:	9f 01       	movw	r18, r30
 2f6:	08 00       	.word	0x0008	; ????
 2f8:	72 01       	movw	r14, r4
 2fa:	04 00       	.word	0x0004	; ????
 2fc:	72 01       	movw	r14, r4
 2fe:	04 00       	.word	0x0004	; ????
 300:	00 00       	nop
 302:	04 00       	.word	0x0004	; ????
 304:	4a 01       	movw	r8, r20
 306:	04 00       	.word	0x0004	; ????
 308:	b8 01       	movw	r22, r16
 30a:	04 00       	.word	0x0004	; ????
 30c:	00 00       	nop
 30e:	04 00       	.word	0x0004	; ????
 310:	00 00       	nop
 312:	04 00       	.word	0x0004	; ????
 314:	00 00       	nop
 316:	04 00       	.word	0x0004	; ????
 318:	00 00       	nop
 31a:	04 00       	.word	0x0004	; ????

0000031c <__ctors_end>:
 31c:	11 24       	eor	r1, r1
 31e:	1f be       	out	0x3f, r1	; 63
 320:	cf ef       	ldi	r28, 0xFF	; 255
 322:	d8 e0       	ldi	r29, 0x08	; 8
 324:	de bf       	out	0x3e, r29	; 62
 326:	cd bf       	out	0x3d, r28	; 61

00000328 <__do_clear_bss>:
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	a0 e0       	ldi	r26, 0x00	; 0
 32c:	b1 e0       	ldi	r27, 0x01	; 1
 32e:	01 c0       	rjmp	.+2      	; 0x332 <.do_clear_bss_start>

00000330 <.do_clear_bss_loop>:
 330:	1d 92       	st	X+, r1

00000332 <.do_clear_bss_start>:
 332:	a5 30       	cpi	r26, 0x05	; 5
 334:	b2 07       	cpc	r27, r18
 336:	e1 f7       	brne	.-8      	; 0x330 <.do_clear_bss_loop>
 338:	b8 d0       	rcall	.+368    	; 0x4aa <main>
 33a:	61 c1       	rjmp	.+706    	; 0x5fe <_exit>

0000033c <__bad_interrupt>:
 33c:	61 ce       	rjmp	.-830    	; 0x0 <__vectors>

0000033e <setDebuggingOutput>:
	/* we can not handle frequencies below 120Hz*/
	if (frequency < 120){
		frequency = 120;
	}
	return(F_CPU / 2 / frequency);
}
 33e:	25 9a       	sbi	0x04, 5	; 4
 340:	08 95       	ret

00000342 <setDebuggingLed>:
 342:	2d 9a       	sbi	0x05, 5	; 5
 344:	08 95       	ret

00000346 <clearDebuggingLed>:
 346:	2d 98       	cbi	0x05, 5	; 5
 348:	08 95       	ret

0000034a <calcOCVal>:



uint16_t calcTOP(uint16_t frequency){
	/* we can not handle frequencies below 120Hz*/
	if (frequency < 120){
 34a:	88 37       	cpi	r24, 0x78	; 120
 34c:	91 05       	cpc	r25, r1
 34e:	10 f4       	brcc	.+4      	; 0x354 <calcOCVal+0xa>
		frequency = 120;
 350:	88 e7       	ldi	r24, 0x78	; 120
 352:	90 e0       	ldi	r25, 0x00	; 0
	}
	return(F_CPU / 2 / frequency);
}

uint16_t calcOCVal(uint16_t frequency){
	return( calcTOP(frequency)/100*PWMDUTYCYCLE );
 354:	9c 01       	movw	r18, r24
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	72 e1       	ldi	r23, 0x12	; 18
 35e:	8a e7       	ldi	r24, 0x7A	; 122
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	1c d1       	rcall	.+568    	; 0x59c <__udivmodsi4>
 364:	36 95       	lsr	r19
 366:	27 95       	ror	r18
 368:	36 95       	lsr	r19
 36a:	27 95       	ror	r18
 36c:	ab e7       	ldi	r26, 0x7B	; 123
 36e:	b4 e1       	ldi	r27, 0x14	; 20
 370:	37 d1       	rcall	.+622    	; 0x5e0 <__umulhisi3>
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	9c 01       	movw	r18, r24
 378:	22 0f       	add	r18, r18
 37a:	33 1f       	adc	r19, r19
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
}
 380:	82 0f       	add	r24, r18
 382:	93 1f       	adc	r25, r19
 384:	08 95       	ret

00000386 <setPWM>:

void setPWM(uint16_t frequency){
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
	
	/* we can not handle frequencies below 120Hz*/
	if (frequency < 120){
 38a:	88 37       	cpi	r24, 0x78	; 120
 38c:	91 05       	cpc	r25, r1
 38e:	30 f4       	brcc	.+12     	; 0x39c <setPWM+0x16>
		
		//disable pwm output
		TCCR1A &= ~( 1<<COM1A1 | 1<<COM1A0);
 390:	e0 e8       	ldi	r30, 0x80	; 128
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	8f 73       	andi	r24, 0x3F	; 63
 398:	80 83       	st	Z, r24
 39a:	17 c0       	rjmp	.+46     	; 0x3ca <setPWM+0x44>
 39c:	ec 01       	movw	r28, r24
		
	} else {
		
		OCR1A = calcOCVal(frequency);
 39e:	d5 df       	rcall	.-86     	; 0x34a <calcOCVal>
 3a0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
uint16_t calcTOP(uint16_t frequency){
	/* we can not handle frequencies below 120Hz*/
	if (frequency < 120){
		frequency = 120;
	}
	return(F_CPU / 2 / frequency);
 3a8:	9e 01       	movw	r18, r28
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	72 e1       	ldi	r23, 0x12	; 18
 3b2:	8a e7       	ldi	r24, 0x7A	; 122
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	f2 d0       	rcall	.+484    	; 0x59c <__udivmodsi4>
		TCCR1A &= ~( 1<<COM1A1 | 1<<COM1A0);
		
	} else {
		
		OCR1A = calcOCVal(frequency);
		ICR1 = calcTOP(frequency);
 3b8:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 3bc:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		
		TCCR1A |=  1<<COM1A1 ;
 3c0:	e0 e8       	ldi	r30, 0x80	; 128
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	80 68       	ori	r24, 0x80	; 128
 3c8:	80 83       	st	Z, r24
		
	}
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <initTimer0>:
}


void initTimer0(void){
	/* set up time progressing timer (1ms interrupt frequency) */
	TCCR0A  = 0x02; //CTC Mode
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	84 bd       	out	0x24, r24	; 36
	OCR0A   = F_CPU/64/1000-1; //top for CTC mode
 3d4:	89 ef       	ldi	r24, 0xF9	; 249
 3d6:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
 3d8:	ee e6       	ldi	r30, 0x6E	; 110
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	82 60       	ori	r24, 0x02	; 2
 3e0:	80 83       	st	Z, r24
	TCCR0B  = 0x03; //run with PS=64
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	85 bd       	out	0x25, r24	; 37
 3e6:	08 95       	ret

000003e8 <initTimer1>:
}

void initTimer1(void){
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
	/* set up pwm pin */
	DDRB |= (1<<PB1);
 3ec:	21 9a       	sbi	0x04, 1	; 4
	/* set up the hardware pwm timer */
	TCCR1A=0x80;
 3ee:	80 e8       	ldi	r24, 0x80	; 128
 3f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B=0x10;
 3f4:	c1 e8       	ldi	r28, 0x81	; 129
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
 3f8:	80 e1       	ldi	r24, 0x10	; 16
 3fa:	88 83       	st	Y, r24
	/*turn off pwm*/
	setPWM(0);
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	c2 df       	rcall	.-124    	; 0x386 <setPWM>
	/* start the timer. no ps */
	TCCR1B=0x11;
 402:	81 e1       	ldi	r24, 0x11	; 17
 404:	88 83       	st	Y, r24
}
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <initButton>:


void initButton(void){
	/* set PortD3 as input with Pullup */
	PORTD |= (1<<PD3);
 40c:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD &= ~(1<<PD3);
 40e:	53 98       	cbi	0x0a, 3	; 10
 410:	08 95       	ret

00000412 <initDebugging>:
}

void initDebugging(void){
	clearDebuggingLed();
 412:	99 df       	rcall	.-206    	; 0x346 <clearDebuggingLed>
	setDebuggingOutput();
 414:	94 cf       	rjmp	.-216    	; 0x33e <setDebuggingOutput>
 416:	08 95       	ret

00000418 <__vector_14>:
 418:	1f 92       	push	r1

uint16_t isrcount=0;

/* Blocking timer interrupt progressing the time */
/* is called every millisecond */
ISR(TIMER0_COMPA_vect, ISR_BLOCK){
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	2f 93       	push	r18
 424:	3f 93       	push	r19
 426:	4f 93       	push	r20
 428:	5f 93       	push	r21
 42a:	6f 93       	push	r22
 42c:	7f 93       	push	r23
 42e:	8f 93       	push	r24
 430:	9f 93       	push	r25
 432:	af 93       	push	r26
 434:	bf 93       	push	r27
 436:	ef 93       	push	r30
 438:	ff 93       	push	r31
	/* check if we have something to do */
	if(elapsedDuration > 0){
 43a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <elapsedDuration>
 43e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <elapsedDuration+0x1>
 442:	89 2b       	or	r24, r25
 444:	b1 f0       	breq	.+44     	; 0x472 <__vector_14+0x5a>
		/* handle internote gap if needed */
		if(elapsedDuration == currentInterNoteGap){
 446:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <currentInterNoteGap>
 44a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <elapsedDuration>
 44e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <elapsedDuration+0x1>
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	82 17       	cp	r24, r18
 456:	93 07       	cpc	r25, r19
 458:	19 f4       	brne	.+6      	; 0x460 <__vector_14+0x48>
			/* keep silent during gap*/
			setPWM( 0 );
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	93 df       	rcall	.-218    	; 0x386 <setPWM>
		}
		/* progress time */
		--elapsedDuration;
 460:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <elapsedDuration>
 464:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <elapsedDuration+0x1>
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <elapsedDuration+0x1>
 46e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <elapsedDuration>
	}
}
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <playToneBackend>:

/* starts playback of a tone with given frequency, duration, and following inter-note-gap  */
void playToneBackend(uint16_t duration_ms, uint16_t frequency_hz, uint8_t internotegap_ms){
	/* set up tone */
	elapsedDuration = duration_ms + internotegap_ms;
 494:	84 0f       	add	r24, r20
 496:	91 1d       	adc	r25, r1
 498:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <elapsedDuration+0x1>
 49c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <elapsedDuration>
	currentInterNoteGap = internotegap_ms;
 4a0:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <currentInterNoteGap>
	setPWM( frequency_hz );
 4a4:	cb 01       	movw	r24, r22
 4a6:	6f cf       	rjmp	.-290    	; 0x386 <setPWM>
 4a8:	08 95       	ret

000004aa <main>:
	
	uint8_t state=STOP;
	uint16_t debounce=0;
	
	/* do initializations */
	initButton();
 4aa:	b0 df       	rcall	.-160    	; 0x40c <initButton>
	initTimer0();
 4ac:	91 df       	rcall	.-222    	; 0x3d0 <initTimer0>
	initTimer1();
 4ae:	9c df       	rcall	.-200    	; 0x3e8 <initTimer1>
 4b0:	b0 df       	rcall	.-160    	; 0x412 <initDebugging>
	
	#if DEBUGGING == TRUE
	initDebugging();
 4b2:	78 94       	sei
 4b4:	83 b7       	in	r24, 0x33	; 51
	#endif
	
	/*  enable interrupts */
	sei();
 4b6:	81 7f       	andi	r24, 0xF1	; 241
	
	set_sleep_mode(SLEEP_MODE_IDLE);
 4b8:	83 bf       	out	0x33, r24	; 51
 4ba:	83 b7       	in	r24, 0x33	; 51
 4bc:	81 60       	ori	r24, 0x01	; 1
	sleep_enable();
 4be:	83 bf       	out	0x33, r24	; 51
 4c0:	c0 e0       	ldi	r28, 0x00	; 0
 4c2:	d0 e0       	ldi	r29, 0x00	; 0

	uint16_t currentFrequency = 0;
	uint16_t currentDuration = 0;
	
	uint8_t state=STOP;
	uint16_t debounce=0;
 4c4:	10 e0       	ldi	r17, 0x00	; 0
 4c6:	00 e0       	ldi	r16, 0x00	; 0
int main(void){

	uint16_t currentFrequency = 0;
	uint16_t currentDuration = 0;
	
	uint8_t state=STOP;
 4c8:	ff 24       	eor	r15, r15
			debounce = 0;
		}
		if (state == STOP){
			if (debounce == DEBOUNCELIMIT){
				state = PLAY;
				debounce = 0;
 4ca:	f3 94       	inc	r15
 4cc:	0f 2e       	mov	r0, r31
 4ce:	fe e4       	ldi	r31, 0x4E	; 78
				} else {
					/* fetch music date */
					currentFrequency = pgm_read_word(&music[2*musicPosition]);
					currentDuration =  pgm_read_word(&music[2*musicPosition+1]);
					/* play tone */
					playToneBackend(note2duration(currentDuration), currentFrequency, INTERNOTEGAP);
 4d0:	ef 2e       	mov	r14, r31
 4d2:	f0 2d       	mov	r31, r0
 4d4:	4b 99       	sbic	0x09, 3	; 9
 4d6:	5d c0       	rjmp	.+186    	; 0x592 <main+0xe8>
	sleep_enable();

	/* main work loop */
	while(TRUE){
		/* check if state change is needed (pressed button)*/		
		if ((PIND & (1<<PD3)) == 0){
 4d8:	21 96       	adiw	r28, 0x01	; 1
 4da:	11 11       	cpse	r17, r1
			debounce++;
 4dc:	0c c0       	rjmp	.+24     	; 0x4f6 <main+0x4c>
		} else {
			debounce = 0;
		}
		if (state == STOP){
 4de:	c4 3f       	cpi	r28, 0xF4	; 244
 4e0:	21 e0       	ldi	r18, 0x01	; 1
			if (debounce == DEBOUNCELIMIT){
 4e2:	d2 07       	cpc	r29, r18
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <main+0x3e>
 4e6:	53 c0       	rjmp	.+166    	; 0x58e <main+0xe4>
 4e8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
				state = PLAY;
				debounce = 0;
				musicPosition = 0;
 4ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 4f0:	c0 e0       	ldi	r28, 0x00	; 0
 4f2:	d0 e0       	ldi	r29, 0x00	; 0
			debounce = 0;
		}
		if (state == STOP){
			if (debounce == DEBOUNCELIMIT){
				state = PLAY;
				debounce = 0;
 4f4:	08 c0       	rjmp	.+16     	; 0x506 <main+0x5c>
 4f6:	c8 3e       	cpi	r28, 0xE8	; 232
 4f8:	33 e0       	ldi	r19, 0x03	; 3
				musicPosition = 0;
			}
		} else {
			if (debounce >= 2*DEBOUNCELIMIT){
 4fa:	d3 07       	cpc	r29, r19
 4fc:	08 f0       	brcs	.+2      	; 0x500 <main+0x56>
 4fe:	42 c0       	rjmp	.+132    	; 0x584 <main+0xda>
 500:	11 30       	cpi	r17, 0x01	; 1
				state = STOP;
				debounce = 0;
			}
		}
		
		if (state == PLAY){
 502:	09 f0       	breq	.+2      	; 0x506 <main+0x5c>
 504:	37 c0       	rjmp	.+110    	; 0x574 <main+0xca>
 506:	1d df       	rcall	.-454    	; 0x342 <setDebuggingLed>
			setDebuggingLed();
 508:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <elapsedDuration>
			/* if next note should be played */
			if(elapsedDuration == 0){
 50c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <elapsedDuration+0x1>
 510:	89 2b       	or	r24, r25
 512:	09 f0       	breq	.+2      	; 0x516 <main+0x6c>
 514:	34 c0       	rjmp	.+104    	; 0x57e <main+0xd4>
 516:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
				/* if there are more notes to play */
				if(musicPosition >= MUSICLENGTH){
 51a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 51e:	8a 3a       	cpi	r24, 0xAA	; 170
 520:	91 05       	cpc	r25, r1
 522:	28 f0       	brcs	.+10     	; 0x52e <main+0x84>
 524:	80 e0       	ldi	r24, 0x00	; 0
					/* we have finished the track - stop */
					state = STOP;
					setPWM(0);
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	2e df       	rcall	.-420    	; 0x386 <setPWM>
 52a:	10 2f       	mov	r17, r16
 52c:	29 c0       	rjmp	.+82     	; 0x580 <main+0xd6>
			/* if next note should be played */
			if(elapsedDuration == 0){
				/* if there are more notes to play */
				if(musicPosition >= MUSICLENGTH){
					/* we have finished the track - stop */
					state = STOP;
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
					setPWM(0);
				} else {
					/* fetch music date */
					currentFrequency = pgm_read_word(&music[2*musicPosition]);
 532:	fc 01       	movw	r30, r24
 534:	ee 0f       	add	r30, r30
 536:	ff 1f       	adc	r31, r31
 538:	e8 59       	subi	r30, 0x98	; 152
 53a:	ff 4f       	sbci	r31, 0xFF	; 255
 53c:	65 91       	lpm	r22, Z+
 53e:	74 91       	lpm	r23, Z
 540:	fc 01       	movw	r30, r24
 542:	ee 0f       	add	r30, r30
					currentDuration =  pgm_read_word(&music[2*musicPosition+1]);
 544:	ff 1f       	adc	r31, r31
 546:	e6 59       	subi	r30, 0x96	; 150
 548:	ff 4f       	sbci	r31, 0xFF	; 255
 54a:	85 91       	lpm	r24, Z+
 54c:	94 91       	lpm	r25, Z
 54e:	4e e1       	ldi	r20, 0x1E	; 30
 550:	9c 01       	movw	r18, r24
					/* play tone */
					playToneBackend(note2duration(currentDuration), currentFrequency, INTERNOTEGAP);
 552:	e2 9e       	mul	r14, r18
 554:	c0 01       	movw	r24, r0
 556:	e3 9e       	mul	r14, r19
 558:	90 0d       	add	r25, r0
 55a:	11 24       	eor	r1, r1
 55c:	9b df       	rcall	.-202    	; 0x494 <playToneBackend>
 55e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
					musicPosition++;
 562:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 56c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 570:	1f 2d       	mov	r17, r15
 572:	06 c0       	rjmp	.+12     	; 0x580 <main+0xd6>
				}
			}
		}else{
			clearDebuggingLed();
 574:	e8 de       	rcall	.-560    	; 0x346 <clearDebuggingLed>
 576:	80 e0       	ldi	r24, 0x00	; 0
			setPWM(0);
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	05 df       	rcall	.-502    	; 0x386 <setPWM>
 57c:	01 c0       	rjmp	.+2      	; 0x580 <main+0xd6>
 57e:	1f 2d       	mov	r17, r15
 580:	88 95       	sleep
 582:	a8 cf       	rjmp	.-176    	; 0x4d4 <main+0x2a>
		}
		/* Set CPU to sleep mode. */
		sleep_cpu();
 584:	c0 e0       	ldi	r28, 0x00	; 0
	}
 586:	d0 e0       	ldi	r29, 0x00	; 0
				musicPosition = 0;
			}
		} else {
			if (debounce >= 2*DEBOUNCELIMIT){
				state = STOP;
				debounce = 0;
 588:	02 c0       	rjmp	.+4      	; 0x58e <main+0xe4>
 58a:	c0 e0       	ldi	r28, 0x00	; 0
 58c:	d0 e0       	ldi	r29, 0x00	; 0
	while(TRUE){
		/* check if state change is needed (pressed button)*/		
		if ((PIND & (1<<PD3)) == 0){
			debounce++;
		} else {
			debounce = 0;
 58e:	10 2f       	mov	r17, r16
 590:	f1 cf       	rjmp	.-30     	; 0x574 <main+0xca>
		}
		if (state == STOP){
			if (debounce == DEBOUNCELIMIT){
				state = PLAY;
				debounce = 0;
 592:	11 23       	and	r17, r17
 594:	d1 f3       	breq	.-12     	; 0x58a <main+0xe0>
		if ((PIND & (1<<PD3)) == 0){
			debounce++;
		} else {
			debounce = 0;
		}
		if (state == STOP){
 596:	c0 e0       	ldi	r28, 0x00	; 0
 598:	d0 e0       	ldi	r29, 0x00	; 0
	while(TRUE){
		/* check if state change is needed (pressed button)*/		
		if ((PIND & (1<<PD3)) == 0){
			debounce++;
		} else {
			debounce = 0;
 59a:	ad cf       	rjmp	.-166    	; 0x4f6 <main+0x4c>

0000059c <__udivmodsi4>:
 59c:	a1 e2       	ldi	r26, 0x21	; 33
 59e:	1a 2e       	mov	r1, r26
 5a0:	aa 1b       	sub	r26, r26
 5a2:	bb 1b       	sub	r27, r27
 5a4:	fd 01       	movw	r30, r26
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <__udivmodsi4_ep>

000005a8 <__udivmodsi4_loop>:
 5a8:	aa 1f       	adc	r26, r26
 5aa:	bb 1f       	adc	r27, r27
 5ac:	ee 1f       	adc	r30, r30
 5ae:	ff 1f       	adc	r31, r31
 5b0:	a2 17       	cp	r26, r18
 5b2:	b3 07       	cpc	r27, r19
 5b4:	e4 07       	cpc	r30, r20
 5b6:	f5 07       	cpc	r31, r21
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <__udivmodsi4_ep>
 5ba:	a2 1b       	sub	r26, r18
 5bc:	b3 0b       	sbc	r27, r19
 5be:	e4 0b       	sbc	r30, r20
 5c0:	f5 0b       	sbc	r31, r21

000005c2 <__udivmodsi4_ep>:
 5c2:	66 1f       	adc	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	1a 94       	dec	r1
 5cc:	69 f7       	brne	.-38     	; 0x5a8 <__udivmodsi4_loop>
 5ce:	60 95       	com	r22
 5d0:	70 95       	com	r23
 5d2:	80 95       	com	r24
 5d4:	90 95       	com	r25
 5d6:	9b 01       	movw	r18, r22
 5d8:	ac 01       	movw	r20, r24
 5da:	bd 01       	movw	r22, r26
 5dc:	cf 01       	movw	r24, r30
 5de:	08 95       	ret

000005e0 <__umulhisi3>:
 5e0:	a2 9f       	mul	r26, r18
 5e2:	b0 01       	movw	r22, r0
 5e4:	b3 9f       	mul	r27, r19
 5e6:	c0 01       	movw	r24, r0
 5e8:	a3 9f       	mul	r26, r19
 5ea:	70 0d       	add	r23, r0
 5ec:	81 1d       	adc	r24, r1
 5ee:	11 24       	eor	r1, r1
 5f0:	91 1d       	adc	r25, r1
 5f2:	b2 9f       	mul	r27, r18
 5f4:	70 0d       	add	r23, r0
 5f6:	81 1d       	adc	r24, r1
 5f8:	11 24       	eor	r1, r1
 5fa:	91 1d       	adc	r25, r1
 5fc:	08 95       	ret

000005fe <_exit>:
 5fe:	f8 94       	cli

00000600 <__stop_program>:
 600:	ff cf       	rjmp	.-2      	; 0x600 <__stop_program>
