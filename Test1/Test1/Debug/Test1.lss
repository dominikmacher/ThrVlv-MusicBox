
Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000098e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000a02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000acc  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000776  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000497  00000000  00000000  00001d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000021e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b6  00000000  00000000  00002344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000453  00000000  00000000  000027fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002c4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	53 c3       	rjmp	.+1702   	; 0x6a8 <__ctors_end>
   2:	00 00       	nop
   4:	61 c3       	rjmp	.+1730   	; 0x6c8 <__bad_interrupt>
   6:	00 00       	nop
   8:	5f c3       	rjmp	.+1726   	; 0x6c8 <__bad_interrupt>
   a:	00 00       	nop
   c:	5d c3       	rjmp	.+1722   	; 0x6c8 <__bad_interrupt>
   e:	00 00       	nop
  10:	5b c3       	rjmp	.+1718   	; 0x6c8 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c3       	rjmp	.+1714   	; 0x6c8 <__bad_interrupt>
  16:	00 00       	nop
  18:	57 c3       	rjmp	.+1710   	; 0x6c8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	55 c3       	rjmp	.+1706   	; 0x6c8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	53 c3       	rjmp	.+1702   	; 0x6c8 <__bad_interrupt>
  22:	00 00       	nop
  24:	51 c3       	rjmp	.+1698   	; 0x6c8 <__bad_interrupt>
  26:	00 00       	nop
  28:	4f c3       	rjmp	.+1694   	; 0x6c8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4d c3       	rjmp	.+1690   	; 0x6c8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4b c3       	rjmp	.+1686   	; 0x6c8 <__bad_interrupt>
  32:	00 00       	nop
  34:	49 c3       	rjmp	.+1682   	; 0x6c8 <__bad_interrupt>
  36:	00 00       	nop
  38:	b5 c3       	rjmp	.+1898   	; 0x7a4 <__vector_14>
  3a:	00 00       	nop
  3c:	45 c3       	rjmp	.+1674   	; 0x6c8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c3       	rjmp	.+1670   	; 0x6c8 <__bad_interrupt>
  42:	00 00       	nop
  44:	41 c3       	rjmp	.+1666   	; 0x6c8 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c3       	rjmp	.+1662   	; 0x6c8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3d c3       	rjmp	.+1658   	; 0x6c8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3b c3       	rjmp	.+1654   	; 0x6c8 <__bad_interrupt>
  52:	00 00       	nop
  54:	39 c3       	rjmp	.+1650   	; 0x6c8 <__bad_interrupt>
  56:	00 00       	nop
  58:	37 c3       	rjmp	.+1646   	; 0x6c8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	35 c3       	rjmp	.+1642   	; 0x6c8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	33 c3       	rjmp	.+1638   	; 0x6c8 <__bad_interrupt>
  62:	00 00       	nop
  64:	31 c3       	rjmp	.+1634   	; 0x6c8 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
  68:	34 00       	.word	0x0034	; ????
  6a:	bb 02       	muls	r27, r27
  6c:	08 00       	.word	0x0008	; ????
  6e:	0b 02       	muls	r16, r27
  70:	04 00       	.word	0x0004	; ????
  72:	bb 02       	muls	r27, r27
  74:	10 00       	.word	0x0010	; ????
  76:	d2 01       	movw	r26, r4
  78:	04 00       	.word	0x0004	; ????
  7a:	0b 02       	muls	r16, r27
  7c:	08 00       	.word	0x0008	; ????
  7e:	5d 01       	movw	r10, r26
  80:	10 00       	.word	0x0010	; ????
  82:	b8 01       	movw	r22, r16
  84:	02 00       	.word	0x0002	; ????
  86:	0b 02       	muls	r16, r27
  88:	02 00       	.word	0x0002	; ????
  8a:	bb 02       	muls	r27, r27
  8c:	04 00       	.word	0x0004	; ????
  8e:	0b 02       	muls	r16, r27
  90:	04 00       	.word	0x0004	; ????
  92:	10 03       	mulsu	r17, r16
  94:	04 00       	.word	0x0004	; ????
  96:	bb 02       	muls	r27, r27
  98:	10 00       	.word	0x0010	; ????
  9a:	6e 02       	muls	r22, r30
  9c:	04 00       	.word	0x0004	; ????
  9e:	4b 02       	muls	r20, r27
  a0:	04 00       	.word	0x0004	; ????
  a2:	0b 02       	muls	r16, r27
  a4:	02 00       	.word	0x0002	; ????
  a6:	d2 01       	movw	r26, r4
  a8:	04 00       	.word	0x0004	; ????
  aa:	0b 02       	muls	r16, r27
  ac:	10 00       	.word	0x0010	; ????
  ae:	bb 02       	muls	r27, r27
  b0:	08 00       	.word	0x0008	; ????
  b2:	0b 02       	muls	r16, r27
  b4:	04 00       	.word	0x0004	; ????
  b6:	bb 02       	muls	r27, r27
  b8:	10 00       	.word	0x0010	; ????
  ba:	b8 01       	movw	r22, r16
  bc:	02 00       	.word	0x0002	; ????
  be:	d2 01       	movw	r26, r4
  c0:	02 00       	.word	0x0002	; ????
  c2:	b8 01       	movw	r22, r16
  c4:	02 00       	.word	0x0002	; ????
  c6:	0b 02       	muls	r16, r27
  c8:	02 00       	.word	0x0002	; ????
  ca:	5d 01       	movw	r10, r26
  cc:	10 00       	.word	0x0010	; ????
  ce:	9f 01       	movw	r18, r30
  d0:	04 00       	.word	0x0004	; ????
  d2:	d2 01       	movw	r26, r4
  d4:	02 00       	.word	0x0002	; ????
  d6:	2a 02       	muls	r18, r26
  d8:	04 00       	.word	0x0004	; ????
  da:	6e 02       	muls	r22, r30
  dc:	10 00       	.word	0x0010	; ????
  de:	6e 02       	muls	r22, r30
  e0:	02 00       	.word	0x0002	; ????
  e2:	4b 02       	muls	r20, r27
  e4:	04 00       	.word	0x0004	; ????
  e6:	ed 01       	movw	r28, r26
  e8:	02 00       	.word	0x0002	; ????
  ea:	6e 02       	muls	r22, r30
  ec:	08 00       	.word	0x0008	; ????
  ee:	4b 02       	muls	r20, r27
  f0:	08 00       	.word	0x0008	; ????
  f2:	b8 01       	movw	r22, r16
  f4:	04 00       	.word	0x0004	; ????
  f6:	d2 01       	movw	r26, r4
  f8:	02 00       	.word	0x0002	; ????
  fa:	0b 02       	muls	r16, r27
  fc:	04 00       	.word	0x0004	; ????
  fe:	bb 02       	muls	r27, r27
 100:	08 00       	.word	0x0008	; ????
 102:	0b 02       	muls	r16, r27
 104:	02 00       	.word	0x0002	; ????
 106:	d2 01       	movw	r26, r4
 108:	04 00       	.word	0x0004	; ????
 10a:	5d 01       	movw	r10, r26
 10c:	02 00       	.word	0x0002	; ????
 10e:	0b 02       	muls	r16, r27
 110:	08 00       	.word	0x0008	; ????
 112:	d2 01       	movw	r26, r4
 114:	08 00       	.word	0x0008	; ????
 116:	d2 01       	movw	r26, r4
 118:	04 00       	.word	0x0004	; ????
 11a:	b8 01       	movw	r22, r16
 11c:	04 00       	.word	0x0004	; ????
 11e:	5d 01       	movw	r10, r26
 120:	04 00       	.word	0x0004	; ????
 122:	49 01       	movw	r8, r18
 124:	04 00       	.word	0x0004	; ????
 126:	5d 01       	movw	r10, r26
 128:	10 00       	.word	0x0010	; ????
 12a:	00 00       	nop
 12c:	04 00       	.word	0x0004	; ????
 12e:	00 00       	nop
 130:	04 00       	.word	0x0004	; ????
 132:	00 00       	nop
 134:	04 00       	.word	0x0004	; ????
 136:	00 00       	nop
 138:	04 00       	.word	0x0004	; ????
	...
 386:	00 00       	nop
 388:	ad 00       	.word	0x00ad	; ????
 38a:	26 01       	movw	r4, r12
 38c:	04 00       	.word	0x0004	; ????
 38e:	72 01       	movw	r14, r4
 390:	04 00       	.word	0x0004	; ????
 392:	b8 01       	movw	r22, r16
 394:	04 00       	.word	0x0004	; ????
 396:	b8 01       	movw	r22, r16
 398:	08 00       	.word	0x0008	; ????
 39a:	70 03       	mulsu	r23, r16
 39c:	04 00       	.word	0x0004	; ????
 39e:	70 03       	mulsu	r23, r16
 3a0:	04 00       	.word	0x0004	; ????
 3a2:	00 00       	nop
 3a4:	04 00       	.word	0x0004	; ????
 3a6:	e4 02       	muls	r30, r20
 3a8:	04 00       	.word	0x0004	; ????
 3aa:	e4 02       	muls	r30, r20
 3ac:	04 00       	.word	0x0004	; ????
 3ae:	00 00       	nop
 3b0:	04 00       	.word	0x0004	; ????
 3b2:	26 01       	movw	r4, r12
 3b4:	04 00       	.word	0x0004	; ????
 3b6:	26 01       	movw	r4, r12
 3b8:	04 00       	.word	0x0004	; ????
 3ba:	72 01       	movw	r14, r4
 3bc:	04 00       	.word	0x0004	; ????
 3be:	b8 01       	movw	r22, r16
 3c0:	04 00       	.word	0x0004	; ????
 3c2:	b8 01       	movw	r22, r16
 3c4:	08 00       	.word	0x0008	; ????
 3c6:	70 03       	mulsu	r23, r16
 3c8:	04 00       	.word	0x0004	; ????
 3ca:	70 03       	mulsu	r23, r16
 3cc:	04 00       	.word	0x0004	; ????
 3ce:	00 00       	nop
 3d0:	04 00       	.word	0x0004	; ????
 3d2:	10 03       	mulsu	r17, r16
 3d4:	04 00       	.word	0x0004	; ????
 3d6:	10 03       	mulsu	r17, r16
 3d8:	04 00       	.word	0x0004	; ????
 3da:	00 00       	nop
 3dc:	04 00       	.word	0x0004	; ????
 3de:	15 01       	movw	r2, r10
 3e0:	04 00       	.word	0x0004	; ????
 3e2:	15 01       	movw	r2, r10
 3e4:	04 00       	.word	0x0004	; ????
 3e6:	4a 01       	movw	r8, r20
 3e8:	04 00       	.word	0x0004	; ????
 3ea:	ee 01       	movw	r28, r28
 3ec:	04 00       	.word	0x0004	; ????
 3ee:	ee 01       	movw	r28, r28
 3f0:	08 00       	.word	0x0008	; ????
 3f2:	dc 03       	fmulsu	r21, r20
 3f4:	04 00       	.word	0x0004	; ????
 3f6:	dc 03       	fmulsu	r21, r20
 3f8:	04 00       	.word	0x0004	; ????
 3fa:	00 00       	nop
 3fc:	04 00       	.word	0x0004	; ????
 3fe:	10 03       	mulsu	r17, r16
 400:	04 00       	.word	0x0004	; ????
 402:	10 03       	mulsu	r17, r16
 404:	04 00       	.word	0x0004	; ????
 406:	00 00       	nop
 408:	04 00       	.word	0x0004	; ????
 40a:	15 01       	movw	r2, r10
 40c:	04 00       	.word	0x0004	; ????
 40e:	15 01       	movw	r2, r10
 410:	04 00       	.word	0x0004	; ????
 412:	4a 01       	movw	r8, r20
 414:	04 00       	.word	0x0004	; ????
 416:	ee 01       	movw	r28, r28
 418:	04 00       	.word	0x0004	; ????
 41a:	ee 01       	movw	r28, r28
 41c:	08 00       	.word	0x0008	; ????
 41e:	dc 03       	fmulsu	r21, r20
 420:	04 00       	.word	0x0004	; ????
 422:	dc 03       	fmulsu	r21, r20
 424:	04 00       	.word	0x0004	; ????
 426:	00 00       	nop
 428:	04 00       	.word	0x0004	; ????
 42a:	e4 02       	muls	r30, r20
 42c:	04 00       	.word	0x0004	; ????
 42e:	e4 02       	muls	r30, r20
 430:	04 00       	.word	0x0004	; ????
 432:	00 00       	nop
 434:	04 00       	.word	0x0004	; ????
 436:	26 01       	movw	r4, r12
 438:	04 00       	.word	0x0004	; ????
 43a:	26 01       	movw	r4, r12
 43c:	04 00       	.word	0x0004	; ????
 43e:	72 01       	movw	r14, r4
 440:	04 00       	.word	0x0004	; ????
 442:	b8 01       	movw	r22, r16
 444:	04 00       	.word	0x0004	; ????
 446:	4b 02       	muls	r20, r27
 448:	08 00       	.word	0x0008	; ????
 44a:	97 04       	cpc	r9, r7
 44c:	04 00       	.word	0x0004	; ????
 44e:	97 04       	cpc	r9, r7
 450:	04 00       	.word	0x0004	; ????
 452:	00 00       	nop
 454:	04 00       	.word	0x0004	; ????
 456:	70 03       	mulsu	r23, r16
 458:	04 00       	.word	0x0004	; ????
 45a:	70 03       	mulsu	r23, r16
 45c:	04 00       	.word	0x0004	; ????
 45e:	00 00       	nop
 460:	04 00       	.word	0x0004	; ????
 462:	26 01       	movw	r4, r12
 464:	04 00       	.word	0x0004	; ????
 466:	26 01       	movw	r4, r12
 468:	04 00       	.word	0x0004	; ????
 46a:	72 01       	movw	r14, r4
 46c:	04 00       	.word	0x0004	; ????
 46e:	b8 01       	movw	r22, r16
 470:	04 00       	.word	0x0004	; ????
 472:	4b 02       	muls	r20, r27
 474:	08 00       	.word	0x0008	; ????
 476:	97 04       	cpc	r9, r7
 478:	04 00       	.word	0x0004	; ????
 47a:	97 04       	cpc	r9, r7
 47c:	04 00       	.word	0x0004	; ????
 47e:	00 00       	nop
 480:	04 00       	.word	0x0004	; ????
 482:	dc 03       	fmulsu	r21, r20
 484:	04 00       	.word	0x0004	; ????
 486:	dc 03       	fmulsu	r21, r20
 488:	04 00       	.word	0x0004	; ????
 48a:	00 00       	nop
 48c:	04 00       	.word	0x0004	; ????
 48e:	4a 01       	movw	r8, r20
 490:	04 00       	.word	0x0004	; ????
 492:	4a 01       	movw	r8, r20
 494:	04 00       	.word	0x0004	; ????
 496:	88 01       	movw	r16, r16
 498:	04 00       	.word	0x0004	; ????
 49a:	ee 01       	movw	r28, r28
 49c:	04 00       	.word	0x0004	; ????
 49e:	ee 01       	movw	r28, r28
 4a0:	10 00       	.word	0x0010	; ????
 4a2:	9f 01       	movw	r18, r30
 4a4:	04 00       	.word	0x0004	; ????
 4a6:	b8 01       	movw	r22, r16
 4a8:	04 00       	.word	0x0004	; ????
 4aa:	e4 02       	muls	r30, r20
 4ac:	10 00       	.word	0x0010	; ????
 4ae:	4b 02       	muls	r20, r27
 4b0:	04 00       	.word	0x0004	; ????
 4b2:	72 01       	movw	r14, r4
 4b4:	04 00       	.word	0x0004	; ????
 4b6:	72 01       	movw	r14, r4
 4b8:	08 00       	.word	0x0008	; ????
 4ba:	4a 01       	movw	r8, r20
 4bc:	04 00       	.word	0x0004	; ????
 4be:	ee 01       	movw	r28, r28
 4c0:	08 00       	.word	0x0008	; ????
 4c2:	b8 01       	movw	r22, r16
 4c4:	04 00       	.word	0x0004	; ????
 4c6:	26 01       	movw	r4, r12
 4c8:	04 00       	.word	0x0004	; ????
 4ca:	00 00       	nop
 4cc:	08 00       	.word	0x0008	; ????
 4ce:	4b 02       	muls	r20, r27
 4d0:	04 00       	.word	0x0004	; ????
 4d2:	2a 02       	muls	r18, r26
 4d4:	04 00       	.word	0x0004	; ????
 4d6:	2a 02       	muls	r18, r26
 4d8:	04 00       	.word	0x0004	; ????
 4da:	ee 01       	movw	r28, r28
 4dc:	04 00       	.word	0x0004	; ????
 4de:	ee 01       	movw	r28, r28
 4e0:	04 00       	.word	0x0004	; ????
 4e2:	00 00       	nop
 4e4:	04 00       	.word	0x0004	; ????
 4e6:	ee 01       	movw	r28, r28
 4e8:	04 00       	.word	0x0004	; ????
 4ea:	d2 01       	movw	r26, r4
 4ec:	04 00       	.word	0x0004	; ????
 4ee:	d2 01       	movw	r26, r4
 4f0:	04 00       	.word	0x0004	; ????
 4f2:	ee 01       	movw	r28, r28
 4f4:	04 00       	.word	0x0004	; ????
 4f6:	ee 01       	movw	r28, r28
 4f8:	04 00       	.word	0x0004	; ????
 4fa:	00 00       	nop
 4fc:	04 00       	.word	0x0004	; ????
 4fe:	4a 01       	movw	r8, r20
 500:	04 00       	.word	0x0004	; ????
 502:	4a 01       	movw	r8, r20
 504:	04 00       	.word	0x0004	; ????
 506:	72 01       	movw	r14, r4
 508:	08 00       	.word	0x0008	; ????
 50a:	4a 01       	movw	r8, r20
 50c:	04 00       	.word	0x0004	; ????
 50e:	00 00       	nop
 510:	04 00       	.word	0x0004	; ????
 512:	4a 01       	movw	r8, r20
 514:	04 00       	.word	0x0004	; ????
 516:	4a 01       	movw	r8, r20
 518:	04 00       	.word	0x0004	; ????
 51a:	ee 01       	movw	r28, r28
 51c:	08 00       	.word	0x0008	; ????
 51e:	b8 01       	movw	r22, r16
 520:	04 00       	.word	0x0004	; ????
 522:	00 00       	nop
 524:	04 00       	.word	0x0004	; ????
 526:	4b 02       	muls	r20, r27
 528:	04 00       	.word	0x0004	; ????
 52a:	2a 02       	muls	r18, r26
 52c:	04 00       	.word	0x0004	; ????
 52e:	2a 02       	muls	r18, r26
 530:	04 00       	.word	0x0004	; ????
 532:	ee 01       	movw	r28, r28
 534:	04 00       	.word	0x0004	; ????
 536:	ee 01       	movw	r28, r28
 538:	04 00       	.word	0x0004	; ????
 53a:	00 00       	nop
 53c:	04 00       	.word	0x0004	; ????
 53e:	ee 01       	movw	r28, r28
 540:	04 00       	.word	0x0004	; ????
 542:	2a 02       	muls	r18, r26
 544:	04 00       	.word	0x0004	; ????
 546:	93 02       	muls	r25, r19
 548:	04 00       	.word	0x0004	; ????
 54a:	4b 02       	muls	r20, r27
 54c:	04 00       	.word	0x0004	; ????
 54e:	4b 02       	muls	r20, r27
 550:	04 00       	.word	0x0004	; ????
 552:	00 00       	nop
 554:	04 00       	.word	0x0004	; ????
 556:	9f 01       	movw	r18, r30
 558:	04 00       	.word	0x0004	; ????
 55a:	ee 01       	movw	r28, r28
 55c:	04 00       	.word	0x0004	; ????
 55e:	ee 01       	movw	r28, r28
 560:	08 00       	.word	0x0008	; ????
 562:	b8 01       	movw	r22, r16
 564:	04 00       	.word	0x0004	; ????
 566:	9f 01       	movw	r18, r30
 568:	08 00       	.word	0x0008	; ????
 56a:	72 01       	movw	r14, r4
 56c:	04 00       	.word	0x0004	; ????
 56e:	72 01       	movw	r14, r4
 570:	04 00       	.word	0x0004	; ????
 572:	00 00       	nop
 574:	04 00       	.word	0x0004	; ????
 576:	4a 01       	movw	r8, r20
 578:	04 00       	.word	0x0004	; ????
 57a:	b8 01       	movw	r22, r16
 57c:	04 00       	.word	0x0004	; ????
 57e:	4b 02       	muls	r20, r27
 580:	04 00       	.word	0x0004	; ????
 582:	2a 02       	muls	r18, r26
 584:	04 00       	.word	0x0004	; ????
 586:	2a 02       	muls	r18, r26
 588:	04 00       	.word	0x0004	; ????
 58a:	ee 01       	movw	r28, r28
 58c:	04 00       	.word	0x0004	; ????
 58e:	ee 01       	movw	r28, r28
 590:	04 00       	.word	0x0004	; ????
 592:	00 00       	nop
 594:	04 00       	.word	0x0004	; ????
 596:	ee 01       	movw	r28, r28
 598:	04 00       	.word	0x0004	; ????
 59a:	d2 01       	movw	r26, r4
 59c:	04 00       	.word	0x0004	; ????
 59e:	d2 01       	movw	r26, r4
 5a0:	04 00       	.word	0x0004	; ????
 5a2:	ee 01       	movw	r28, r28
 5a4:	04 00       	.word	0x0004	; ????
 5a6:	ee 01       	movw	r28, r28
 5a8:	04 00       	.word	0x0004	; ????
 5aa:	00 00       	nop
 5ac:	04 00       	.word	0x0004	; ????
 5ae:	4a 01       	movw	r8, r20
 5b0:	04 00       	.word	0x0004	; ????
 5b2:	4a 01       	movw	r8, r20
 5b4:	04 00       	.word	0x0004	; ????
 5b6:	72 01       	movw	r14, r4
 5b8:	08 00       	.word	0x0008	; ????
 5ba:	4a 01       	movw	r8, r20
 5bc:	04 00       	.word	0x0004	; ????
 5be:	00 00       	nop
 5c0:	04 00       	.word	0x0004	; ????
 5c2:	4a 01       	movw	r8, r20
 5c4:	04 00       	.word	0x0004	; ????
 5c6:	4a 01       	movw	r8, r20
 5c8:	04 00       	.word	0x0004	; ????
 5ca:	ee 01       	movw	r28, r28
 5cc:	08 00       	.word	0x0008	; ????
 5ce:	b8 01       	movw	r22, r16
 5d0:	04 00       	.word	0x0004	; ????
 5d2:	00 00       	nop
 5d4:	04 00       	.word	0x0004	; ????
 5d6:	4b 02       	muls	r20, r27
 5d8:	04 00       	.word	0x0004	; ????
 5da:	2a 02       	muls	r18, r26
 5dc:	04 00       	.word	0x0004	; ????
 5de:	2a 02       	muls	r18, r26
 5e0:	04 00       	.word	0x0004	; ????
 5e2:	ee 01       	movw	r28, r28
 5e4:	04 00       	.word	0x0004	; ????
 5e6:	ee 01       	movw	r28, r28
 5e8:	04 00       	.word	0x0004	; ????
 5ea:	00 00       	nop
 5ec:	04 00       	.word	0x0004	; ????
 5ee:	ee 01       	movw	r28, r28
 5f0:	04 00       	.word	0x0004	; ????
 5f2:	2a 02       	muls	r18, r26
 5f4:	04 00       	.word	0x0004	; ????
 5f6:	93 02       	muls	r25, r19
 5f8:	04 00       	.word	0x0004	; ????
 5fa:	4b 02       	muls	r20, r27
 5fc:	04 00       	.word	0x0004	; ????
 5fe:	4b 02       	muls	r20, r27
 600:	04 00       	.word	0x0004	; ????
 602:	00 00       	nop
 604:	04 00       	.word	0x0004	; ????
 606:	9f 01       	movw	r18, r30
 608:	04 00       	.word	0x0004	; ????
 60a:	ee 01       	movw	r28, r28
 60c:	04 00       	.word	0x0004	; ????
 60e:	ee 01       	movw	r28, r28
 610:	08 00       	.word	0x0008	; ????
 612:	b8 01       	movw	r22, r16
 614:	04 00       	.word	0x0004	; ????
 616:	9f 01       	movw	r18, r30
 618:	08 00       	.word	0x0008	; ????
 61a:	72 01       	movw	r14, r4
 61c:	04 00       	.word	0x0004	; ????
 61e:	72 01       	movw	r14, r4
 620:	04 00       	.word	0x0004	; ????
 622:	00 00       	nop
 624:	04 00       	.word	0x0004	; ????
 626:	4a 01       	movw	r8, r20
 628:	04 00       	.word	0x0004	; ????
 62a:	b8 01       	movw	r22, r16
 62c:	04 00       	.word	0x0004	; ????
 62e:	00 00       	nop
 630:	04 00       	.word	0x0004	; ????
 632:	00 00       	nop
 634:	04 00       	.word	0x0004	; ????
 636:	00 00       	nop
 638:	04 00       	.word	0x0004	; ????
 63a:	00 00       	nop
 63c:	04 00       	.word	0x0004	; ????
	...

000006a8 <__ctors_end>:
 6a8:	11 24       	eor	r1, r1
 6aa:	1f be       	out	0x3f, r1	; 63
 6ac:	cf ef       	ldi	r28, 0xFF	; 255
 6ae:	d8 e0       	ldi	r29, 0x08	; 8
 6b0:	de bf       	out	0x3e, r29	; 62
 6b2:	cd bf       	out	0x3d, r28	; 61

000006b4 <__do_clear_bss>:
 6b4:	21 e0       	ldi	r18, 0x01	; 1
 6b6:	a0 e0       	ldi	r26, 0x00	; 0
 6b8:	b1 e0       	ldi	r27, 0x01	; 1
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <.do_clear_bss_start>

000006bc <.do_clear_bss_loop>:
 6bc:	1d 92       	st	X+, r1

000006be <.do_clear_bss_start>:
 6be:	a5 30       	cpi	r26, 0x05	; 5
 6c0:	b2 07       	cpc	r27, r18
 6c2:	e1 f7       	brne	.-8      	; 0x6bc <.do_clear_bss_loop>
 6c4:	b8 d0       	rcall	.+368    	; 0x836 <main>
 6c6:	61 c1       	rjmp	.+706    	; 0x98a <_exit>

000006c8 <__bad_interrupt>:
 6c8:	9b cc       	rjmp	.-1738   	; 0x0 <__vectors>

000006ca <setDebuggingOutput>:
	/* we can not handle frequencies below 120Hz*/
	if (frequency < 120){
		frequency = 120;
	}
	return(F_CPU / 2 / frequency);
}
 6ca:	25 9a       	sbi	0x04, 5	; 4
 6cc:	08 95       	ret

000006ce <setDebuggingLed>:
 6ce:	2d 9a       	sbi	0x05, 5	; 5
 6d0:	08 95       	ret

000006d2 <clearDebuggingLed>:
 6d2:	2d 98       	cbi	0x05, 5	; 5
 6d4:	08 95       	ret

000006d6 <calcOCVal>:



uint16_t calcTOP(uint16_t frequency){
	/* we can not handle frequencies below 120Hz*/
	if (frequency < 120){
 6d6:	88 37       	cpi	r24, 0x78	; 120
 6d8:	91 05       	cpc	r25, r1
 6da:	10 f4       	brcc	.+4      	; 0x6e0 <calcOCVal+0xa>
		frequency = 120;
 6dc:	88 e7       	ldi	r24, 0x78	; 120
 6de:	90 e0       	ldi	r25, 0x00	; 0
	}
	return(F_CPU / 2 / frequency);
}

uint16_t calcOCVal(uint16_t frequency){
	return( calcTOP(frequency)/100*PWMDUTYCYCLE );
 6e0:	9c 01       	movw	r18, r24
 6e2:	40 e0       	ldi	r20, 0x00	; 0
 6e4:	50 e0       	ldi	r21, 0x00	; 0
 6e6:	60 e0       	ldi	r22, 0x00	; 0
 6e8:	72 e1       	ldi	r23, 0x12	; 18
 6ea:	8a e7       	ldi	r24, 0x7A	; 122
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	1c d1       	rcall	.+568    	; 0x928 <__udivmodsi4>
 6f0:	36 95       	lsr	r19
 6f2:	27 95       	ror	r18
 6f4:	36 95       	lsr	r19
 6f6:	27 95       	ror	r18
 6f8:	ab e7       	ldi	r26, 0x7B	; 123
 6fa:	b4 e1       	ldi	r27, 0x14	; 20
 6fc:	37 d1       	rcall	.+622    	; 0x96c <__umulhisi3>
 6fe:	96 95       	lsr	r25
 700:	87 95       	ror	r24
 702:	9c 01       	movw	r18, r24
 704:	22 0f       	add	r18, r18
 706:	33 1f       	adc	r19, r19
 708:	22 0f       	add	r18, r18
 70a:	33 1f       	adc	r19, r19
}
 70c:	82 0f       	add	r24, r18
 70e:	93 1f       	adc	r25, r19
 710:	08 95       	ret

00000712 <setPWM>:

void setPWM(uint16_t frequency){
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
	
	/* we can not handle frequencies below 120Hz*/
	if (frequency < 120){
 716:	88 37       	cpi	r24, 0x78	; 120
 718:	91 05       	cpc	r25, r1
 71a:	30 f4       	brcc	.+12     	; 0x728 <setPWM+0x16>
		
		//disable pwm output
		TCCR1A &= ~( 1<<COM1A1 | 1<<COM1A0);
 71c:	e0 e8       	ldi	r30, 0x80	; 128
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	8f 73       	andi	r24, 0x3F	; 63
 724:	80 83       	st	Z, r24
 726:	17 c0       	rjmp	.+46     	; 0x756 <setPWM+0x44>
 728:	ec 01       	movw	r28, r24
		
	} else {
		
		OCR1A = calcOCVal(frequency);
 72a:	d5 df       	rcall	.-86     	; 0x6d6 <calcOCVal>
 72c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 730:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
uint16_t calcTOP(uint16_t frequency){
	/* we can not handle frequencies below 120Hz*/
	if (frequency < 120){
		frequency = 120;
	}
	return(F_CPU / 2 / frequency);
 734:	9e 01       	movw	r18, r28
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	50 e0       	ldi	r21, 0x00	; 0
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	72 e1       	ldi	r23, 0x12	; 18
 73e:	8a e7       	ldi	r24, 0x7A	; 122
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	f2 d0       	rcall	.+484    	; 0x928 <__udivmodsi4>
		TCCR1A &= ~( 1<<COM1A1 | 1<<COM1A0);
		
	} else {
		
		OCR1A = calcOCVal(frequency);
		ICR1 = calcTOP(frequency);
 744:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 748:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		
		TCCR1A |=  1<<COM1A1 ;
 74c:	e0 e8       	ldi	r30, 0x80	; 128
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	80 68       	ori	r24, 0x80	; 128
 754:	80 83       	st	Z, r24
		
	}
}
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	08 95       	ret

0000075c <initTimer0>:
}


void initTimer0(void){
	/* set up time progressing timer (1ms interrupt frequency) */
	TCCR0A  = 0x02; //CTC Mode
 75c:	82 e0       	ldi	r24, 0x02	; 2
 75e:	84 bd       	out	0x24, r24	; 36
	OCR0A   = F_CPU/64/1000-1; //top for CTC mode
 760:	89 ef       	ldi	r24, 0xF9	; 249
 762:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
 764:	ee e6       	ldi	r30, 0x6E	; 110
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	82 60       	ori	r24, 0x02	; 2
 76c:	80 83       	st	Z, r24
	TCCR0B  = 0x03; //run with PS=64
 76e:	83 e0       	ldi	r24, 0x03	; 3
 770:	85 bd       	out	0x25, r24	; 37
 772:	08 95       	ret

00000774 <initTimer1>:
}

void initTimer1(void){
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
	/* set up pwm pin */
	DDRB |= (1<<PB1);
 778:	21 9a       	sbi	0x04, 1	; 4
	/* set up the hardware pwm timer */
	TCCR1A=0x80;
 77a:	80 e8       	ldi	r24, 0x80	; 128
 77c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B=0x10;
 780:	c1 e8       	ldi	r28, 0x81	; 129
 782:	d0 e0       	ldi	r29, 0x00	; 0
 784:	80 e1       	ldi	r24, 0x10	; 16
 786:	88 83       	st	Y, r24
	/*turn off pwm*/
	setPWM(0);
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	c2 df       	rcall	.-124    	; 0x712 <setPWM>
	/* start the timer. no ps */
	TCCR1B=0x11;
 78e:	81 e1       	ldi	r24, 0x11	; 17
 790:	88 83       	st	Y, r24
}
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <initButton>:


void initButton(void){
	/* set PortD3 as input with Pullup */
	PORTD |= (1<<PD3);
 798:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD &= ~(1<<PD3);
 79a:	53 98       	cbi	0x0a, 3	; 10
 79c:	08 95       	ret

0000079e <initDebugging>:
}

void initDebugging(void){
	clearDebuggingLed();
 79e:	99 df       	rcall	.-206    	; 0x6d2 <clearDebuggingLed>
	setDebuggingOutput();
 7a0:	94 cf       	rjmp	.-216    	; 0x6ca <setDebuggingOutput>
 7a2:	08 95       	ret

000007a4 <__vector_14>:
 7a4:	1f 92       	push	r1

uint16_t isrcount=0;

/* Blocking timer interrupt progressing the time */
/* is called every millisecond */
ISR(TIMER0_COMPA_vect, ISR_BLOCK){
 7a6:	0f 92       	push	r0
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	0f 92       	push	r0
 7ac:	11 24       	eor	r1, r1
 7ae:	2f 93       	push	r18
 7b0:	3f 93       	push	r19
 7b2:	4f 93       	push	r20
 7b4:	5f 93       	push	r21
 7b6:	6f 93       	push	r22
 7b8:	7f 93       	push	r23
 7ba:	8f 93       	push	r24
 7bc:	9f 93       	push	r25
 7be:	af 93       	push	r26
 7c0:	bf 93       	push	r27
 7c2:	ef 93       	push	r30
 7c4:	ff 93       	push	r31
	/* check if we have something to do */
	if(elapsedDuration > 0){
 7c6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <elapsedDuration>
 7ca:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <elapsedDuration+0x1>
 7ce:	89 2b       	or	r24, r25
 7d0:	b1 f0       	breq	.+44     	; 0x7fe <__vector_14+0x5a>
		/* handle internote gap if needed */
		if(elapsedDuration == currentInterNoteGap){
 7d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <currentInterNoteGap>
 7d6:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <elapsedDuration>
 7da:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <elapsedDuration+0x1>
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	82 17       	cp	r24, r18
 7e2:	93 07       	cpc	r25, r19
 7e4:	19 f4       	brne	.+6      	; 0x7ec <__vector_14+0x48>
			/* keep silent during gap*/
			setPWM( 0 );
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	93 df       	rcall	.-218    	; 0x712 <setPWM>
		}
		/* progress time */
		--elapsedDuration;
 7ec:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <elapsedDuration>
 7f0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <elapsedDuration+0x1>
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <elapsedDuration+0x1>
 7fa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <elapsedDuration>
	}
}
 7fe:	ff 91       	pop	r31
 800:	ef 91       	pop	r30
 802:	bf 91       	pop	r27
 804:	af 91       	pop	r26
 806:	9f 91       	pop	r25
 808:	8f 91       	pop	r24
 80a:	7f 91       	pop	r23
 80c:	6f 91       	pop	r22
 80e:	5f 91       	pop	r21
 810:	4f 91       	pop	r20
 812:	3f 91       	pop	r19
 814:	2f 91       	pop	r18
 816:	0f 90       	pop	r0
 818:	0f be       	out	0x3f, r0	; 63
 81a:	0f 90       	pop	r0
 81c:	1f 90       	pop	r1
 81e:	18 95       	reti

00000820 <playToneBackend>:

/* starts playback of a tone with given frequency, duration, and following inter-note-gap  */
void playToneBackend(uint16_t duration_ms, uint16_t frequency_hz, uint8_t internotegap_ms){
	/* set up tone */
	elapsedDuration = duration_ms + internotegap_ms;
 820:	84 0f       	add	r24, r20
 822:	91 1d       	adc	r25, r1
 824:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <elapsedDuration+0x1>
 828:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <elapsedDuration>
	currentInterNoteGap = internotegap_ms;
 82c:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <currentInterNoteGap>
	setPWM( frequency_hz );
 830:	cb 01       	movw	r24, r22
 832:	6f cf       	rjmp	.-290    	; 0x712 <setPWM>
 834:	08 95       	ret

00000836 <main>:
	
	uint8_t state=STOP;
	uint16_t debounce=0;
	
	/* do initializations */
	initButton();
 836:	b0 df       	rcall	.-160    	; 0x798 <initButton>
	initTimer0();
 838:	91 df       	rcall	.-222    	; 0x75c <initTimer0>
	initTimer1();
 83a:	9c df       	rcall	.-200    	; 0x774 <initTimer1>
 83c:	b0 df       	rcall	.-160    	; 0x79e <initDebugging>
	
	#if DEBUGGING == TRUE
	initDebugging();
 83e:	78 94       	sei
 840:	83 b7       	in	r24, 0x33	; 51
	#endif
	
	/*  enable interrupts */
	sei();
 842:	81 7f       	andi	r24, 0xF1	; 241
	
	set_sleep_mode(SLEEP_MODE_IDLE);
 844:	83 bf       	out	0x33, r24	; 51
 846:	83 b7       	in	r24, 0x33	; 51
 848:	81 60       	ori	r24, 0x01	; 1
	sleep_enable();
 84a:	83 bf       	out	0x33, r24	; 51
 84c:	c0 e0       	ldi	r28, 0x00	; 0
 84e:	d0 e0       	ldi	r29, 0x00	; 0

	uint16_t currentFrequency = 0;
	uint16_t currentDuration = 0;
	
	uint8_t state=STOP;
	uint16_t debounce=0;
 850:	10 e0       	ldi	r17, 0x00	; 0
 852:	00 e0       	ldi	r16, 0x00	; 0
int main(void){

	uint16_t currentFrequency = 0;
	uint16_t currentDuration = 0;
	
	uint8_t state=STOP;
 854:	ff 24       	eor	r15, r15
			debounce = 0;
		}
		if (state == STOP){
			if (debounce == DEBOUNCELIMIT){
				state = PLAY;
				debounce = 0;
 856:	f3 94       	inc	r15
 858:	0f 2e       	mov	r0, r31
 85a:	fe e4       	ldi	r31, 0x4E	; 78
				} else {
					/* fetch music date */
					currentFrequency = pgm_read_word(&music[1][2*musicPosition+1]);
					currentDuration =  pgm_read_word(&music[1][2*musicPosition+2]);
					/* play tone */
					playToneBackend(note2duration(currentDuration), currentFrequency, INTERNOTEGAP);
 85c:	ef 2e       	mov	r14, r31
 85e:	f0 2d       	mov	r31, r0
 860:	4b 99       	sbic	0x09, 3	; 9
 862:	5d c0       	rjmp	.+186    	; 0x91e <__stack+0x1f>
	sleep_enable();

	/* main work loop */
	while(TRUE){
		/* check if state change is needed (pressed button)*/		
		if ((PIND & (1<<PD3)) == 0){
 864:	21 96       	adiw	r28, 0x01	; 1
 866:	11 11       	cpse	r17, r1
			debounce++;
 868:	0c c0       	rjmp	.+24     	; 0x882 <main+0x4c>
		} else {
			debounce = 0;
		}
		if (state == STOP){
 86a:	c4 3f       	cpi	r28, 0xF4	; 244
 86c:	21 e0       	ldi	r18, 0x01	; 1
			if (debounce == DEBOUNCELIMIT){
 86e:	d2 07       	cpc	r29, r18
 870:	09 f0       	breq	.+2      	; 0x874 <main+0x3e>
 872:	53 c0       	rjmp	.+166    	; 0x91a <__stack+0x1b>
 874:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
				state = PLAY;
				debounce = 0;
				musicPosition = 0;
 878:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 87c:	c0 e0       	ldi	r28, 0x00	; 0
 87e:	d0 e0       	ldi	r29, 0x00	; 0
			debounce = 0;
		}
		if (state == STOP){
			if (debounce == DEBOUNCELIMIT){
				state = PLAY;
				debounce = 0;
 880:	08 c0       	rjmp	.+16     	; 0x892 <main+0x5c>
 882:	c8 3e       	cpi	r28, 0xE8	; 232
 884:	33 e0       	ldi	r19, 0x03	; 3
				musicPosition = 0;
			}
		} else {
			if (debounce >= 2*DEBOUNCELIMIT){
 886:	d3 07       	cpc	r29, r19
 888:	08 f0       	brcs	.+2      	; 0x88c <main+0x56>
 88a:	42 c0       	rjmp	.+132    	; 0x910 <__stack+0x11>
 88c:	11 30       	cpi	r17, 0x01	; 1
				state = STOP;
				debounce = 0;
			}
		}
		
		if (state == PLAY){
 88e:	09 f0       	breq	.+2      	; 0x892 <main+0x5c>
 890:	37 c0       	rjmp	.+110    	; 0x900 <__stack+0x1>
 892:	1d df       	rcall	.-454    	; 0x6ce <setDebuggingLed>
			setDebuggingLed();
 894:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <elapsedDuration>
			/* if next note should be played */
			if(elapsedDuration == 0){
 898:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <elapsedDuration+0x1>
 89c:	89 2b       	or	r24, r25
 89e:	09 f0       	breq	.+2      	; 0x8a2 <main+0x6c>
 8a0:	34 c0       	rjmp	.+104    	; 0x90a <__stack+0xb>
 8a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
				/* if there are more notes to play */
				if(musicPosition >= music[1][0]){
 8a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 8aa:	8d 3a       	cpi	r24, 0xAD	; 173
 8ac:	91 05       	cpc	r25, r1
 8ae:	28 f0       	brcs	.+10     	; 0x8ba <main+0x84>
 8b0:	80 e0       	ldi	r24, 0x00	; 0
					/* we have finished the track - stop */
					state = STOP;
					setPWM(0);
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	2e df       	rcall	.-420    	; 0x712 <setPWM>
 8b6:	10 2f       	mov	r17, r16
 8b8:	29 c0       	rjmp	.+82     	; 0x90c <__stack+0xd>
			/* if next note should be played */
			if(elapsedDuration == 0){
				/* if there are more notes to play */
				if(musicPosition >= music[1][0]){
					/* we have finished the track - stop */
					state = STOP;
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
					setPWM(0);
				} else {
					/* fetch music date */
					currentFrequency = pgm_read_word(&music[1][2*musicPosition+1]);
 8be:	fc 01       	movw	r30, r24
 8c0:	ee 0f       	add	r30, r30
 8c2:	ff 1f       	adc	r31, r31
 8c4:	e6 57       	subi	r30, 0x76	; 118
 8c6:	fc 4f       	sbci	r31, 0xFC	; 252
 8c8:	65 91       	lpm	r22, Z+
 8ca:	74 91       	lpm	r23, Z
 8cc:	fc 01       	movw	r30, r24
 8ce:	ee 0f       	add	r30, r30
					currentDuration =  pgm_read_word(&music[1][2*musicPosition+2]);
 8d0:	ff 1f       	adc	r31, r31
 8d2:	e4 57       	subi	r30, 0x74	; 116
 8d4:	fc 4f       	sbci	r31, 0xFC	; 252
 8d6:	85 91       	lpm	r24, Z+
 8d8:	94 91       	lpm	r25, Z
 8da:	4e e1       	ldi	r20, 0x1E	; 30
 8dc:	9c 01       	movw	r18, r24
					/* play tone */
					playToneBackend(note2duration(currentDuration), currentFrequency, INTERNOTEGAP);
 8de:	e2 9e       	mul	r14, r18
 8e0:	c0 01       	movw	r24, r0
 8e2:	e3 9e       	mul	r14, r19
 8e4:	90 0d       	add	r25, r0
 8e6:	11 24       	eor	r1, r1
 8e8:	9b df       	rcall	.-202    	; 0x820 <playToneBackend>
 8ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
					musicPosition++;
 8ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 8f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 8fc:	1f 2d       	mov	r17, r15
 8fe:	06 c0       	rjmp	.+12     	; 0x90c <__stack+0xd>
				}
			}
		}else{
			clearDebuggingLed();
 900:	e8 de       	rcall	.-560    	; 0x6d2 <clearDebuggingLed>
 902:	80 e0       	ldi	r24, 0x00	; 0
			setPWM(0);
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	05 df       	rcall	.-502    	; 0x712 <setPWM>
 908:	01 c0       	rjmp	.+2      	; 0x90c <__stack+0xd>
 90a:	1f 2d       	mov	r17, r15
 90c:	88 95       	sleep
 90e:	a8 cf       	rjmp	.-176    	; 0x860 <main+0x2a>
		}
		/* Set CPU to sleep mode. */
		sleep_cpu();
 910:	c0 e0       	ldi	r28, 0x00	; 0
	}
 912:	d0 e0       	ldi	r29, 0x00	; 0
				musicPosition = 0;
			}
		} else {
			if (debounce >= 2*DEBOUNCELIMIT){
				state = STOP;
				debounce = 0;
 914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0x1b>
 916:	c0 e0       	ldi	r28, 0x00	; 0
 918:	d0 e0       	ldi	r29, 0x00	; 0
	while(TRUE){
		/* check if state change is needed (pressed button)*/		
		if ((PIND & (1<<PD3)) == 0){
			debounce++;
		} else {
			debounce = 0;
 91a:	10 2f       	mov	r17, r16
 91c:	f1 cf       	rjmp	.-30     	; 0x900 <__stack+0x1>
		}
		if (state == STOP){
			if (debounce == DEBOUNCELIMIT){
				state = PLAY;
				debounce = 0;
 91e:	11 23       	and	r17, r17
 920:	d1 f3       	breq	.-12     	; 0x916 <__stack+0x17>
		if ((PIND & (1<<PD3)) == 0){
			debounce++;
		} else {
			debounce = 0;
		}
		if (state == STOP){
 922:	c0 e0       	ldi	r28, 0x00	; 0
 924:	d0 e0       	ldi	r29, 0x00	; 0
	while(TRUE){
		/* check if state change is needed (pressed button)*/		
		if ((PIND & (1<<PD3)) == 0){
			debounce++;
		} else {
			debounce = 0;
 926:	ad cf       	rjmp	.-166    	; 0x882 <main+0x4c>

00000928 <__udivmodsi4>:
 928:	a1 e2       	ldi	r26, 0x21	; 33
 92a:	1a 2e       	mov	r1, r26
 92c:	aa 1b       	sub	r26, r26
 92e:	bb 1b       	sub	r27, r27
 930:	fd 01       	movw	r30, r26
 932:	0d c0       	rjmp	.+26     	; 0x94e <__udivmodsi4_ep>

00000934 <__udivmodsi4_loop>:
 934:	aa 1f       	adc	r26, r26
 936:	bb 1f       	adc	r27, r27
 938:	ee 1f       	adc	r30, r30
 93a:	ff 1f       	adc	r31, r31
 93c:	a2 17       	cp	r26, r18
 93e:	b3 07       	cpc	r27, r19
 940:	e4 07       	cpc	r30, r20
 942:	f5 07       	cpc	r31, r21
 944:	20 f0       	brcs	.+8      	; 0x94e <__udivmodsi4_ep>
 946:	a2 1b       	sub	r26, r18
 948:	b3 0b       	sbc	r27, r19
 94a:	e4 0b       	sbc	r30, r20
 94c:	f5 0b       	sbc	r31, r21

0000094e <__udivmodsi4_ep>:
 94e:	66 1f       	adc	r22, r22
 950:	77 1f       	adc	r23, r23
 952:	88 1f       	adc	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	1a 94       	dec	r1
 958:	69 f7       	brne	.-38     	; 0x934 <__udivmodsi4_loop>
 95a:	60 95       	com	r22
 95c:	70 95       	com	r23
 95e:	80 95       	com	r24
 960:	90 95       	com	r25
 962:	9b 01       	movw	r18, r22
 964:	ac 01       	movw	r20, r24
 966:	bd 01       	movw	r22, r26
 968:	cf 01       	movw	r24, r30
 96a:	08 95       	ret

0000096c <__umulhisi3>:
 96c:	a2 9f       	mul	r26, r18
 96e:	b0 01       	movw	r22, r0
 970:	b3 9f       	mul	r27, r19
 972:	c0 01       	movw	r24, r0
 974:	a3 9f       	mul	r26, r19
 976:	70 0d       	add	r23, r0
 978:	81 1d       	adc	r24, r1
 97a:	11 24       	eor	r1, r1
 97c:	91 1d       	adc	r25, r1
 97e:	b2 9f       	mul	r27, r18
 980:	70 0d       	add	r23, r0
 982:	81 1d       	adc	r24, r1
 984:	11 24       	eor	r1, r1
 986:	91 1d       	adc	r25, r1
 988:	08 95       	ret

0000098a <_exit>:
 98a:	f8 94       	cli

0000098c <__stop_program>:
 98c:	ff cf       	rjmp	.-2      	; 0x98c <__stop_program>
